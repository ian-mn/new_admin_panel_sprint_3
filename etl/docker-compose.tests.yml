version: "3"

services:

  backend:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.backend
    env_file:
      - ./.env
    volumes:
      - static_volume:/app/static/
    depends_on:
      - db
    networks:
    - movies

  sqlite_to_postgres:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.sqlite_to_postgres
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
    networks:
    - movies

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs:/etc/nginx/conf.d:ro
      - static_volume:/static/:ro
    depends_on:
      - backend
    ports:
      - "80:80"
      - "8000:8000"
    networks:
      - movies

  swagger:
    image: swaggerapi/swagger-ui:latest
    volumes:
      - ./swagger/:/openapi/:ro
    environment:
      SWAGGER_JSON: /openapi/openapi.yaml
    ports:
      - "8080:8080"
    networks:
      - movies

  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=${pg_db}
      - POSTGRES_USER=${pg_user}
      - POSTGRES_PASSWORD=${pg_pass}
    ports:
      - "${pg_port}:${pg_port}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - movies

  elasticsearch:
    image: elasticsearch:8.6.2
    restart: always
    ports:
      - "${elastic_port}:${elastic_port}"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
    healthcheck:
      test: curl -s http://${elastic_host}:${elastic_port} >/dev/null || exit 1
      interval: 1s
      timeout: 1s
      retries: 50
    networks:
      - movies

  redis:
    image: redis:latest
    ports:
      - "${redis_port}"
    command: redis-server --requirepass ${redis_pass} --appendonly yes
    networks:
      - movies

  etl:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.etl
    env_file:
      - ./.env
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - movies

  newman:
    image: postman/newman
    command:
      run etl.json -k 
      -r cli,json 
      --reporter-json-export="reports/etl.json"
    volumes:
      - ./postman:/etc/newman
    depends_on:
      etl:
        condition: service_completed_successfully
    network_mode: 
      "host"
    

networks:
  movies:

volumes:
  static_volume: